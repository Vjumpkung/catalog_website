/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/ping": {
    /** @description Ping and Pong */
    get: {
      responses: {
        /** @description Hello World message */
        200: {
          content: {
            "application/json": components["schemas"]["IndexGetResponseDto"];
          };
        };
      };
    };
  };
  "/products/": {
    /** @description Endpoint to get all products. */
    get: {
      parameters: {
        query: {
          /** @description Status of the products */
          status: "all" | "published";
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProductsAllResponseDto"];
          };
        };
      };
    };
    /** @description Endpoint to create a product. */
    post: {
      /** @description Product object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProductCreateDto"];
          "application/xml": components["schemas"]["ProductCreateDto"];
        };
      };
      responses: {
        /** @description Product created successfully. */
        201: {
          content: {
            "application/json": components["schemas"]["ProductResponseDto"];
            "application/xml": components["schemas"]["ProductResponseDto"];
          };
        };
        /** @description Invalid request body. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
            "application/xml": components["schemas"]["ErrorDto"];
          };
        };
      };
    };
  };
  "/products/{id}": {
    /** @description Endpoint to get a product by id. */
    get: {
      parameters: {
        path: {
          /** @description Product id */
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProductResponseDto"];
          };
        };
      };
    };
    /** @description Endpoint to delete a product. */
    delete: {
      parameters: {
        path: {
          /** @description Product id */
          id: string;
        };
      };
      responses: {
        /** @description Product deleted successfully. */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
      };
    };
    /** @description Endpoint to change the status of a product. */
    patch: {
      parameters: {
        query: {
          /** @description Status of the product */
          status: false | true;
        };
        path: {
          /** @description Product id */
          id: string;
        };
      };
      responses: {
        /** @description Status changed successfully. */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
      };
    };
  };
  "/products/{id}/update": {
    /** @description Endpoint to update a product. */
    patch: {
      parameters: {
        path: {
          /** @description Product id */
          id: string;
        };
      };
      /** @description Product object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProductUpdateDto"];
          "application/xml": components["schemas"]["ProductUpdateDto"];
        };
      };
      responses: {
        /** @description Product updated successfully. */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
      };
    };
  };
  "/users/": {
    /** @description Endpoint to create a new user */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["UserResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
    /** @description Endpoint to create a new user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserDto"];
          "application/xml": components["schemas"]["CreateUserDto"];
        };
      };
      responses: {
        /** @description User created */
        204: {
          content: never;
        };
        /** @description User already exists */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/users/{id}": {
    /** @description Endpoint to delete a user */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description User deleted */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
      };
    };
    /** @description Endpoint to update a user */
    patch: {
      parameters: {
        path: {
          /** @description User ID */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUserDto"];
          "application/xml": components["schemas"]["UpdateUserDto"];
        };
      };
      responses: {
        /** @description User updated */
        204: {
          content: never;
        };
        /** @description Username already exists */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/auth/login": {
    /** @description Login */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginUserDto"];
          "application/xml": components["schemas"]["LoginUserDto"];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
      };
    };
  };
  "/auth/register": {
    /** @description register admin */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserDto"];
          "application/xml": components["schemas"]["CreateUserDto"];
        };
      };
      responses: {
        /** @description Admin created */
        204: {
          content: never;
        };
        /** @description User already exists */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
      };
    };
  };
  "/auth/me": {
    /** @description Get user info */
    get: {
      responses: {
        /** @description User info */
        200: {
          content: {
            "application/json": components["schemas"]["MeResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorDto"];
          };
        };
      };
    };
  };
  "/choices/": {
    /** @description Endpoint to get all choices. */
    get: {
      responses: {
        /** @description Choices retrieved successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["AllChoicesResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
    /** @description Endpoint to create a choice. */
    post: {
      /** @description Choice object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateChoiceDto"];
          "application/xml": components["schemas"]["CreateChoiceDto"];
        };
      };
      responses: {
        /** @description Choice created successfully. */
        201: {
          content: {
            "application/json": components["schemas"]["ChoiceResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/choices/{id}": {
    /** @description Endpoint to get choices by id. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Choices retrieved successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["ChoiceResponseDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
    /** @description Delete Choice by id. */
    delete: {
      parameters: {
        path: {
          /** @description Choice ID. */
          id: string;
        };
      };
      responses: {
        /** @description Choices delete successfully. */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
    /** @description Update Choice by id. */
    patch: {
      parameters: {
        path: {
          /** @description Choice ID. */
          id: string;
        };
      };
      /** @description Choice object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateChoiceDto"];
          "application/xml": components["schemas"]["UpdateChoiceDto"];
        };
      };
      responses: {
        /** @description Choices update successfully. */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/settings/": {
    /** @description Endpoint to get settings. */
    get: {
      responses: {
        /** @description Settings retrieved successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["GetSettingsDto"];
          };
        };
      };
    };
    /** @description Endpoint to update settings. */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateSettingsDto"];
          "application/xml": components["schemas"]["UpdateSettingsDto"];
        };
      };
      responses: {
        /** @description Settings updated successfully. */
        204: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    IndexGetResponseDto: {
      /** @example pong */
      msg: string;
    };
    CreateUserDto: {
      /** @example string */
      username: string;
      /** @example string */
      password: string;
    };
    UserResponseDto: {
        /** @example string */
        id: string;
        /** @example string */
        username: string;
        /** @example string */
        created_at: string;
      }[];
    ErrorDto: {
      /** @example string */
      message: string;
    };
    LoginUserDto: {
      /** @example string */
      username: string;
      /** @example string */
      password: string;
    };
    LoginResponseDto: {
      /** @example string */
      access_token: string;
    };
    UpdateUserDto: {
      /** @example string */
      newUsername?: string;
      /** @example string */
      oldPassword: string;
      /** @example string */
      newPassword?: string;
    };
    MeResponseDto: {
      /** @example string */
      id: string;
      /** @example string */
      username: string;
      /** @example string */
      created_at: string;
    };
    ProductsAllResponseDto: {
        /** @example string */
        id: string;
        /** @example string */
        name: string;
        choices: components["schemas"]["ChoiceResponseDto"][];
        /**
         * @example [
         *   "string"
         * ]
         */
        images: string[];
        /** @example 10 */
        price: number;
        /** @example string */
        published_at: string;
      }[];
    ProductCreateDto: {
      /** @example string */
      name: string;
      /** @example 0 */
      price?: number;
      /** @example string */
      description?: string;
      /**
       * @example [
       *   "string"
       * ]
       */
      choices?: string[];
      /**
       * @example [
       *   "string"
       * ]
       */
      images?: string[];
      /** @example string */
      published_at?: string;
    };
    ProductResponseDto: {
      /** @example string */
      id: string;
      /** @example string */
      name: string;
      /** @example string */
      description: string;
      choices: components["schemas"]["ChoiceResponseDto"][];
      /**
       * @example [
       *   "string"
       * ]
       */
      images: string[];
      /** @example 10 */
      price: number;
      /** @example string */
      published_at: string;
    };
    CreateChoiceDto: {
      /** @example string */
      name: string;
      /** @example 0 */
      price: number;
    };
    ChoiceResponseDto: {
      /** @example string */
      id: string;
      /** @example choice */
      name: string;
      /** @example 0 */
      price: number;
      /** @example 2021-08-08T00:00:00.000Z */
      created_at: string;
    };
    UpdateChoiceDto: {
      /** @example string */
      name?: string;
      /** @example 0 */
      price?: number;
    };
    ProductUpdateDto: {
      /** @example string */
      name?: string;
      /** @example string */
      description?: string;
      /**
       * @example [
       *   "string"
       * ]
       */
      choices?: string[];
      /**
       * @example [
       *   "string"
       * ]
       */
      images?: string[];
      /** @example 0 */
      price?: number;
    };
    UpdateSettingsDto: {
      /** @example string */
      name?: string;
      /** @example string */
      logo?: string;
    };
    GetSettingsDto: {
      /** @example string */
      name: string;
      /** @example string */
      logo: string;
    };
    AllChoicesResponseDto: {
        /** @example string */
        id: string;
        /** @example choice */
        name: string;
        /** @example 0 */
        price: number;
        /** @example 2021-08-08T00:00:00.000Z */
        created_at: string;
      }[];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
